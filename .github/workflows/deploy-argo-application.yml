---
name: Deploy Argo Application

on:
  workflow_call:
    inputs:
      previous_environment:
        type: string
        description: previous environment to deploy
        default: tst
        required: false
      environment:
        type: string
        description: environment to deploy
        required: true
      service_name:
        type: string
        description: service name
        required: true
    secrets:
      ARGOCD_AUTH_TOKEN:
        required: true
      DD_API_KEY:
        required: true
      DD_MONITOR_APP_KEY:
        required: true
      PAT_TOKEN:
        required: false
      TEAMS_WEBHOOK_URL:
        required: false
      AIVELLA_TEAMS_WEBHOOK_URL:  # New secret for Aivella Engineering channel
        required: false
      SENDGRID_DEPLOYMENT_NOTI_API_KEY:
        required: false

permissions:
  id-token: write
  contents: write
  pull-requests: write
  repository-projects: write
jobs:
  deploy:
    name: Deploy Argo Application
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Check out sources code
        uses: actions/checkout@v4

      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Create PR promote image tag
        id: createPrId
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KUSTOMIZATION_PATH: manifests/overlays/${{ inputs.environment }}/kustomization.yaml
          SERVICE_NAME: ${{ inputs.service_name }}
          TARGET_ENV: ${{ inputs.environment }}
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
        run: |
          # configure git client
          git config user.name github-actions
          git config user.email github-actions@github.com

          # get the image tag
          calculatedSha=$(git rev-parse --short=8 ${{ github.sha }})
          export NEW_BRANCH=${{ env.TARGET_ENV }}/$calculatedSha
          echo "NEW_BRANCH=$NEW_BRANCH" >> $GITHUB_OUTPUT
          export IMAGE_TAG=$SERVICE_NAME-$calculatedSha
          
          # create a new branch
          git pull origin ${{ env.BRANCH }}
          git checkout -b $NEW_BRANCH
          
          # merge specific file from $BRANCH
          git checkout ${{ env.BRANCH }} $KUSTOMIZATION_PATH
          yq e -i '.images[0].newTag= env(IMAGE_TAG)' $KUSTOMIZATION_PATH
          git add $KUSTOMIZATION_PATH

          # Update the development-patch.yaml file with the IMAGE_TAG_VERSION
          yq e -i '(.[] | select(.op == "add" and .value.name == "IMAGE_TAG_VERSION").value.value) = env(IMAGE_TAG)' manifests/overlays/${{ env.TARGET_ENV }}/development-patch.yaml
          git add manifests/overlays/${{ env.TARGET_ENV }}/development-patch.yaml

          # Update deployment
          yq e -i '.images[0].newTag= env(IMAGE_TAG)' manifests/overlays/${{ env.TARGET_ENV }}/kustomization.yaml
          git add manifests/overlays/${{ env.TARGET_ENV }}/kustomization.yaml
          
          numOfFilesChanged=$( git diff --name-only origin/${{ env.BRANCH }} | wc -l )
          echo "The number of files is different between the branches $NEW_BRANCH and ${{ env.BRANCH }}: $numOfFilesChanged"
          
          if [ $numOfFilesChanged -gt 0 ]; then
            # push the change to the new branch
            git commit -m "Update image tag of ${{ env.TARGET_ENV }} environment"
            git push -u origin $NEW_BRANCH
            
            #create pr
            gh pr create \
              -B ${{ env.BRANCH }} \
              -H $NEW_BRANCH\
              --title "Promote deploy ${{ env.TARGET_ENV }} environment" \
              --body "Automatically created by GitHub Actions" \
          fi

      - name: Merge PR
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          NEW_BRANCH: ${{ steps.createPrId.outputs.NEW_BRANCH }}
        run: |
          if [ -n "$PAT_TOKEN" ]; then
            unset GITHUB_TOKEN
            echo $PAT_TOKEN | gh auth login --with-token
          fi
          gh pr merge ${{ env.NEW_BRANCH }} --merge --admin --delete-branch

      - name: Deploy Application
        id: deploy-application
        env:
          APPLICATION_PATH: app-managers/overlays/${{ inputs.environment }}
          APPLICATION_FILE_NAME: application-${{ inputs.environment }}.yaml
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
          SERVER_ADDRESS: argo.dep.icariohealth.io
          TARGET_REVISION: ${{ steps.extract_branch.outputs.branch }}
        run: |
          if [ -n "$TARGET_REVISION" ]; then
            echo -e "\n- op: 'replace'\n  path: '/spec/source/targetRevision'\n  value: '$TARGET_REVISION'" >> $APPLICATION_PATH/application.yaml
            kustomize build $APPLICATION_PATH > $APPLICATION_FILE_NAME

            set +e
            MAX_RETRIES=5
            RETRY_DELAY=5
            ARGO_GENERIC_ERR_EXIT_CODE=20
            DEPLOY_COMMAND="argocd app create -f  $APPLICATION_FILE_NAME --http-retry-max $MAX_RETRIES --auth-token $ARGOCD_AUTH_TOKEN --server $SERVER_ADDRESS --upsert"
            
            deploy_with_retries() {
              local attempt=1
              local exit_code
              while [ $attempt -le $MAX_RETRIES ]; do
                $DEPLOY_COMMAND
                exit_code=$?
                if [ $exit_code -eq $ARGO_GENERIC_ERR_EXIT_CODE ]; then
                  echo "::warning::Attempt $attempt failed with exit code $ARGO_GENERIC_ERR_EXIT_CODE. Retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                  ((attempt++))
                else
                  break
                fi
              done
              return $exit_code
            }

            deploy_with_retries
            exit_code=$?
            echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

            set -e
            if [ $exit_code -eq 0 ]; then
              echo "Application deployed successfully!"
            elif [ $exit_code -eq $ARGO_GENERIC_ERR_EXIT_CODE ]; then
              echo "::error::Application deploy failed after $MAX_RETRIES retries."
              exit $exit_code
            else
              exit $exit_code
            fi
          else
            echo -e "::warning:: Deploy Announcement:"
            echo -e "::warning:: The release has been not deployed, it appears there are no commits following the conventional commit guidelines for this release."
            echo -e "::warning:: To ensure future releases are properly versioned and tagged, please refer to the https://mynovu.atlassian.net/wiki/x/BQDS5w#Style-Guide for detailed instructions on how to format your commits."
            echo -e "::warning:: We recommend following these conventions to maintain consistency and automation in versioning and release management."
            echo -e "::warning:: Thank you!"
            exit 1
          fi